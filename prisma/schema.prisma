// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  randomColor     String?
  password        String?
  role            String    @default("user")
  isEmailVerified Boolean   @default(false)
  posts           Post[]
  comments        Comment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
}

model Post{
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String    @db.ObjectId
  storyParagraphs String[]
  picture_url     String
  likes           String[]  @default([])
  comments        Comment[]  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
}

model Comment{
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  post            Post?     @relation(fields: [postId], references: [id])
  postId          String?   @db.ObjectId
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String    @db.ObjectId
  content         String
  likes           String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt 
  commentId       String?   @db.ObjectId
  comment         Comment?  @relation("CommentComment", fields: [commentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  comments        Comment[] @relation("CommentComment")
}